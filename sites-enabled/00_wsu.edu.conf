# Configuration for the wsu.edu site.
#
# Redirect all port 80 requests to HTTPS.
server {
    listen 80;
    server_name wsu.edu www.wsu.edu;

    # Rewrite any ~/ paths to public.wsu.edu. We need to respect the
    # original schme, so we duplicate this rule below.
    rewrite ^/~(.*)/(.*)$ http://public.wsu.edu/~$1/$2 last;
    rewrite ^/~(.*)       http://public.wsu.edu/~$1/   last;

    rewrite ^/payroll(.*)$ http://payroll.wsu.edu$1 last;

    rewrite /forms2        http://old-www.wsu.edu$request_uri permanent;
    rewrite /manuals_forms http://old-www.wsu.edu$request_uri permanent;

    rewrite ^/webpbs(.*)$  http://webpbs.wsu.edu$1 permanent;

    rewrite /psportal      http://old-www.wsu.edu$request_uri permanent;

    rewrite /afw           https://afw.wsu.edu        permanent;
    rewrite /swwrc         https://swwrc.wsu.edu      permanent;
    rewrite /psychology    https://psychology.wsu.edu permanent;

    return 301 https://wsu.edu$request_uri;
}

# Redirect all 443 requests for www to a non-www domain.
server {
    server_name www.wsu.edu;

    include /etc/nginx/wsuwp-common-header.conf;

    ssl_certificate     /etc/nginx/ssl/wsu.edu.cer;
    ssl_certificate_key /etc/nginx/ssl/wsu.edu.key;

    include /etc/nginx/wsuwp-ssl-common.conf;

    return 301 https://wsu.edu$request_uri;
}

server {
    server_name wsu.edu;

    include /etc/nginx/wsuwp-common-header.conf;

    ssl_certificate     /etc/nginx/ssl/wsu.edu.cer;
    ssl_certificate_key /etc/nginx/ssl/wsu.edu.key;

    include /etc/nginx/wsuwp-ssl-common.conf;

    rewrite ^/~(.*)/(.*)$  https://public.wsu.edu/~$1/$2 last;
    rewrite ^/~(.*)        https://public.wsu.edu/~$1/   last;
    rewrite ^/payroll(.*)$ https://payroll.wsu.edu$1 last;

    rewrite /forms2        https://old-www.wsu.edu$request_uri permanent;
    rewrite /manuals_forms https://old-www.wsu.edu$request_uri permanent;

    rewrite ^/webpbs(.*)$  https://webpbs.wsu.edu$1 permanent;

    rewrite /psportal      https://old-www.wsu.edu$request_uri permanent;

    rewrite /afw           https://afw.wsu.edu        permanent;
    rewrite /swwrc         https://swwrc.wsu.edu      permanent;
    rewrite /psychology    https://psychology.wsu.edu permanent;

    rewrite /Nid https://old-www.wsu.edu$request_uri permanent;
    rewrite /gened https://old-www.wsu.edu$request_uri permanent;
    rewrite /index-images https://old-www.wsu.edu$request_uri permanent;
    rewrite /goodall https://old-www.wsu.edu$request_uri permanent;
    rewrite /navigatewsu https://old-www.wsu.edu$request_uri permanent;
    rewrite /designer https://old-www.wsu.edu$request_uri permanent;
    rewrite /customerror https://old-www.wsu.edu$request_uri permanent;
    rewrite /Music153 https://old-www.wsu.edu$request_uri permanent;
    rewrite /wirelessinfo https://old-www.wsu.edu$request_uri permanent;
    rewrite /cctfish https://old-www.wsu.edu$request_uri permanent;
    rewrite /cgi-bin https://old-www.wsu.edu$request_uri permanent;

    # Default log file
    access_log  /var/log/nginx/access.log;

    # TLS Log File
    access_log  /var/log/nginx/tls-access.log custom_ssl;

    # Timing Log File
    access_log /var/log/nginx/timing-access.log timed_combined;

    # Per https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    #
    # Prevents IE and Google Chrome from MIME-sniffing a response away from the declared
    # content-type.
    add_header X-Content-Type-Options nosniff;

    # Enable the XSS filter built into modern web browsers. This will re-enable
    # the XSS filter if a user has disabled it.
    add_header X-XSS-Protection "1; mode=block";

    # Ensure that content served from this server is not embedded in other pages
    # unless they are of the same origin.
    add_header X-Frame-Options SAMEORIGIN;

    location / {
        index index.php;
        try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~* /autodiscover/autodiscover.xml {
        access_log off;
        log_not_found off;
        return 404;
    }

    # Deny direct access to PHP files in wp-includes and wp-admin/includes.
    location ~ /(wp-includes|wp-admin\/includes)/(.+)\.php$ {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Deny direct access to PHP files in the WordPress root.
    location ~ /(xmlrpc|wp-settings|wp-load|wp-mail|wp-config-sample|wp-blog-header).php$ {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Requests to WordPress are made in /wordpress/, which is at the same
    # level as /wp-content/. To properly handle these, we provide an alias
    # to move up a directory and find static files.
    location ~ ^/wp-content/(.*)$ {
        expires 7d;
        alias /var/www/wp-content/$1;
    }

    # Match any requests created by the WP Document Revisions plugin, which
    # masks a full download URL with a URL processed by WordPress behind
    # existing authentication.
    location ~ ^/([_0-9a-zA-Z-]+/)?documents/(.*)$ {
        index index.php;
        try_files $uri /index.php$is_args$args;
    }

    # Handle all static assets by serving the file directly. Add directives
    # to send expires headers and turn off 404 error logging.
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|xls|doc|zip|exe|mp3|mp4|pdf|ai|psd|eps|ppt|dmg|csv|key|numbers|pages)$ {
        expires 7d;
        log_not_found off;
    }

    # this prevents hidden files (beginning with a period) from being served
    location ~ /\. {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Via https://github.com/h5bp/server-configs-nginx/
    #
    # Prevent a variety of file extensions associated with backups and configs
    # from being served.
    location ~* (?:\.(?:bak|config|sql|fla|ini|log|sh|inc|swp|dist)|~)$ {
        access_log off;
        log_not_found off;
        deny all;
    }

    # Rewrite multisite in a subdirectory '.../wp-.*' and '.../*.php'.
    if (!-e $request_filename) {
        rewrite ^/[_0-9a-zA-Z-]+(/wp-.*) $1 last;
        rewrite ^/[_0-9a-zA-Z-]+.*(/wp-admin/.*\.php)$ $1 last;
        rewrite ^/[_0-9a-zA-Z-]+(/.*\.php)$ $1 last;
    }

    include /etc/nginx/wsuwp-common-cache-server.conf;

    location ~ \.php$ {
        client_max_body_size 150M;
        try_files      $uri =404;

        # Set slightly different headers for oEmbed requests
        if ( $embed_request ) {
            add_header X-Frame-Option ALLOWALL;
            add_header X-Content-Type-Options nosniff;
            add_header X-XSS-Protection "1; mode=block";
        }

        # Include the fastcgi_params defaults provided by nginx
        include        /etc/nginx/fastcgi_params;

        fastcgi_read_timeout 60s;

        # SCRIPT_FILENAME is a required parameter for things to work properly,
        # but was missing in the default fastcgi_params on upgrade to nginx 1.4.
        # We define it here to be sure that it exists.
        fastcgi_param   SCRIPT_FILENAME         $document_root$fastcgi_script_name;

        fastcgi_cache_bypass $no_cache;
        fastcgi_no_cache $no_cache;

        fastcgi_cache WSUWP;
        fastcgi_cache_valid 200 10m;

        # Use the upstream for php5-fpm that we defined in nginx.conf
        fastcgi_pass   php;

        # And get to serving the file!
        fastcgi_index  index.php;

        #Use stale cache items while updating in the background
        fastcgi_cache_use_stale error timeout invalid_header http_500;
        fastcgi_cache_lock on;
        fastcgi_cache_lock_timeout 10s;

        add_header X-Cache $upstream_cache_status;
    }
}
